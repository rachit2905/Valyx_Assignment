/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.49).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import org.threeten.bp.LocalDate;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.sql.Date;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-25T07:07:42.427263843Z[GMT]")
@Validated
public interface TransactionsApi {

    @Operation(summary = "Get a list of parsed transactions", description = "", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response"),

            @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/transactions", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Void> transactionsGet(
            @Parameter(in = ParameterIn.QUERY, description = "Page number", schema = @Schema()) @Valid @RequestParam(value = "page", required = false) Integer page,
            @Parameter(in = ParameterIn.QUERY, description = "Number of transactions per page", schema = @Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit);

    @Operation(summary = "Search for transactions within a date range", description = "", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response"),

            @ApiResponse(responseCode = "400", description = "Bad request"),

            @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/transactions/search", produces = { "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Void> transactionsSearchGet(
            @NotNull @Parameter(in = ParameterIn.QUERY, description = "Start date for the search", required = true, schema = @Schema()) @Valid @RequestParam(value = "startDate", required = true) Date startDate,
            @NotNull @Parameter(in = ParameterIn.QUERY, description = "End date for the search", required = true, schema = @Schema()) @Valid @RequestParam(value = "endDate", required = true) Date endDate);

    @Operation(summary = "Get a transaction by ID", description = "", tags = {})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successful response"),

            @ApiResponse(responseCode = "404", description = "Transaction not found"),

            @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/transactions/{transactionId}", produces = {
            "application/json" }, method = RequestMethod.GET)
    ResponseEntity<Void> transactionsTransactionIdGet(
            @Parameter(in = ParameterIn.PATH, description = "ID of the transaction to retrieve", required = true, schema = @Schema()) @PathVariable("transactionId") Integer transactionId);

}
